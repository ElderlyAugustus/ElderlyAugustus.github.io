<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Misc on xα&#39;s blog</title>
    <link>https://elderlyaugustus.github.io/tags/misc/</link>
    <description>Recent content in Misc on xα&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 25 Feb 2023 22:22:22 +0800</lastBuildDate><atom:link href="https://elderlyaugustus.github.io/tags/misc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>虚拟制作（Virtual Production）中的景深问题思考</title>
      <link>https://elderlyaugustus.github.io/posts/2023-02-25-%E8%99%9A%E6%8B%9F%E5%88%B6%E4%BD%9C%E4%B8%AD%E7%9A%84%E6%99%AF%E6%B7%B1%E9%97%AE%E9%A2%98%E6%80%9D%E8%80%83/</link>
      <pubDate>Sat, 25 Feb 2023 22:22:22 +0800</pubDate>
      
      <guid>https://elderlyaugustus.github.io/posts/2023-02-25-%E8%99%9A%E6%8B%9F%E5%88%B6%E4%BD%9C%E4%B8%AD%E7%9A%84%E6%99%AF%E6%B7%B1%E9%97%AE%E9%A2%98%E6%80%9D%E8%80%83/</guid>
      <description>虚拟制作（Virtual Production）中的景深问题思考 从发现这一问题就在思考如何从源头上的solution。之前和@houjue讨论得到过基本的思路和方法，但一直没有工程实践上的想法。今天旁观一场研讨会再次听到这一问题，突然有了想法，看了UE这部分的实现差不多确定是可以work的。但想安度最后的大学时光，便懒得做了，浅记在这里未来闲了再说吧。
什么问题 简而言之就是LED墙内视锥的虚拟摄影机和真实摄影机的两次景深处理叠加，带来的背景景深错误。具体阐述可见大三时水的《基于LED背景墙的电影虚拟化制作实践探索与未来展望》这篇，不在博客里详述了。
一个基于Unreal的解决方案Idea UE中假定高斯模糊为景深效果的实现方式（实际略有差异），高斯模糊存在以下叠加关系 \(\sigma_1^2+\sigma_2^2=\sigma_3^2\) 时， \(\sigma_1\) 与 \(\sigma_2\) 的两次高斯模糊叠加后效果与一次 \(\sigma_3\) 的高斯模糊一致； 而UE景深后处理的 \(\sigma\) 与 \(CoC\) （弥散圆）相关（线性关系），那同样认为真实摄影机的景深结果与 \(CoC\) 相关，则有 \(R_{CoC_1}^2+R_{CoC_2}^2=R_{CoC_3}^2\) ， \(CoC_3\) 带来的景深效果是最终目标， \(CoC_2\) 是真实摄影机到异形屏对应像素之间的距离计算得到，由此可以算出渲染应得的 \(CoC_1\) 。
怎么获得真实摄影机到异形屏对应像素之间的距离：等效虚拟摄影机视线到虚拟LED Wall上交点的距离 —— 给CineCameraActor绑一个SceneCapture2D直接抓取ZBuffer。
预告一下今年的目标更新，在翻译最近两年关于光谱渲染的两篇Siggraph Course Notes：
Spectral imaging in production | SIGGRAPH 2021 Courses
Practical aspects of spectral data in digital content production | SIGGRAPH 2022 Courses
目前一天翻不到半页的龟速，主线工作太多。等有一些进度了就放一部分上来。</description>
      <content:encoded><![CDATA[<h3 id="虚拟制作virtual-production中的景深问题思考">虚拟制作（Virtual
Production）中的景深问题思考</h3>
<p>从发现这一问题就在思考如何从源头上的solution。之前和@houjue讨论得到过基本的思路和方法，但一直没有工程实践上的想法。今天旁观一场研讨会再次听到这一问题，突然有了想法，看了UE这部分的实现差不多确定是可以work的。但想安度最后的大学时光，便懒得做了，浅记在这里未来闲了再说吧。</p>
<h4 id="什么问题">什么问题</h4>
<p>简而言之就是LED墙内视锥的虚拟摄影机和真实摄影机的两次景深处理叠加，带来的背景景深错误。具体阐述可见大三时水的<a
href="https://kns.cnki.net/kcms2/article/abstract?v=3uoqIhG8C44YLTlOAiTRKibYlV5Vjs7iJTKGjg9uTdeTsOI_ra5_XUAbhEqKu3bP9YJ0xq018ctMzI0WTYdn9vcPVHDkfA2s&amp;uniplatform=NZKPT">《基于LED背景墙的电影虚拟化制作实践探索与未来展望》</a>这篇，不在博客里详述了。</p>
<h4 id="一个基于unreal的解决方案idea">一个基于Unreal的解决方案Idea</h4>
<ol type="1">
<li><p>UE中假定高斯模糊为景深效果的实现方式（实际略有差异），高斯模糊存在以下叠加关系
<span class="math inline">\(\sigma_1^2+\sigma_2^2=\sigma_3^2\)</span>
时， <span class="math inline">\(\sigma_1\)</span> 与 <span
class="math inline">\(\sigma_2\)</span> 的两次高斯模糊叠加后效果与一次
<span class="math inline">\(\sigma_3\)</span> 的高斯模糊一致；
而UE景深后处理的 <span class="math inline">\(\sigma\)</span> 与 <span
class="math inline">\(CoC\)</span>
（弥散圆）相关（线性关系），那同样认为真实摄影机的景深结果与 <span
class="math inline">\(CoC\)</span> 相关，则有 <span
class="math inline">\(R_{CoC_1}^2+R_{CoC_2}^2=R_{CoC_3}^2\)</span> ，
<span class="math inline">\(CoC_3\)</span> 带来的景深效果是最终目标，
<span class="math inline">\(CoC_2\)</span>
是真实摄影机到异形屏对应像素之间的距离计算得到，由此可以算出渲染应得的
<span class="math inline">\(CoC_1\)</span> 。</p></li>
<li><p>怎么获得真实摄影机到异形屏对应像素之间的距离：等效虚拟摄影机视线到虚拟LED
Wall上交点的距离 ——
给<code>CineCameraActor</code>绑一个<code>SceneCapture2D</code>直接抓取<code>ZBuffer</code>。</p></li>
</ol>
<blockquote>
<p>预告一下今年的目标更新，在翻译最近两年关于光谱渲染的两篇Siggraph
Course Notes：</p>
<p><a href="https://dl.acm.org/doi/pdf/10.1145/3450508.3464582">Spectral
imaging in production | SIGGRAPH 2021 Courses</a></p>
<p><a
href="https://dl.acm.org/doi/pdf/10.1145/3532720.3535632">Practical
aspects of spectral data in digital content production | SIGGRAPH 2022
Courses</a></p>
<p>目前一天翻不到半页的龟速，主线工作太多。等有一些进度了就放一部分上来。</p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>迁移说明</title>
      <link>https://elderlyaugustus.github.io/posts/2022-10-31-%E8%BF%81%E7%A7%BB%E8%AF%B4%E6%98%8E/</link>
      <pubDate>Mon, 31 Oct 2022 12:02:25 +0800</pubDate>
      
      <guid>https://elderlyaugustus.github.io/posts/2022-10-31-%E8%BF%81%E7%A7%BB%E8%AF%B4%E6%98%8E/</guid>
      <description>2022年10月31日，从Hexo迁移至Hugo
欢迎访问我的个人主页，主页内容主要为学习笔记，目前主要包含
计算机图形学
数理基础
影视技术分享</description>
      <content:encoded><![CDATA[<p>2022年10月31日，从Hexo迁移至Hugo</p>
<p>欢迎访问我的个人主页，主页内容主要为学习笔记，目前主要包含</p>
<ul>
<li><p>计算机图形学</p></li>
<li><p>数理基础</p></li>
<li><p>影视技术分享</p></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>2022-03-01-2023年校招简历</title>
      <link>https://elderlyaugustus.github.io/posts/2022-03-01-2023%E5%B1%8A%E6%A0%A1%E6%8B%9B%E7%AE%80%E5%8E%86/</link>
      <pubDate>Sat, 10 Apr 2021 10:00:00 +0800</pubDate>
      
      <guid>https://elderlyaugustus.github.io/posts/2022-03-01-2023%E5%B1%8A%E6%A0%A1%E6%8B%9B%E7%AE%80%E5%8E%86/</guid>
      <description>2023年灾难性的春秋招时的两份简历，现在早已脱敏了，留个档案记录吧。
影视工作和游戏工作基本都用的这两份，可能个别公司有特殊要求有修订版就不列在此了。
春招用，还没有实习的：
秋招用，已经有实习了：
唯一的作品集：https://www.bilibili.com/video/BV1sb4y1S7Za/
（没有专门的作品集，也没什么游戏作品，拿了个大二时的调色作业来充数…）</description>
      <content:encoded><![CDATA[<p>2023年灾难性的春秋招时的两份简历，现在早已脱敏了，留个档案记录吧。</p>
<p>影视工作和游戏工作基本都用的这两份，可能个别公司有特殊要求有修订版就不列在此了。</p>
<p>春招用，还没有实习的：</p>
<p><img src="/images/misc/resume-2023-spring.png" alt="resume-2023-spring" style="zoom: 50%;" /></p>
<p>秋招用，已经有实习了：</p>
<p><img src="/images/misc/resume-2023-autumn.png" alt="resume-2023-autumn.png" style="zoom: 50%;" /></p>
<p>唯一的作品集：<a
href="https://www.bilibili.com/video/BV1sb4y1S7Za/">https://www.bilibili.com/video/BV1sb4y1S7Za/</a></p>
<p>（没有专门的作品集，也没什么游戏作品，拿了个大二时的调色作业来充数…）</p>
<p><a
href="https://www.bilibili.com/video/BV1sb4y1S7Za/"><img src="/images/misc/grading_showreel.png" alt="grading_showreel.png" style="zoom: 50%;" src="https://www.bilibili.com/video/BV1sb4y1S7Za/"/></a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>2022-04-10-UE5.0时给系里写的Lumen和Nanite的一些介绍性文字</title>
      <link>https://elderlyaugustus.github.io/posts/2022-04-10-ue5.0%E6%97%B6%E7%BB%99%E7%B3%BB%E9%87%8C%E5%86%99%E7%9A%84lumen%E5%92%8Cnanite%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BB%8B%E7%BB%8D%E6%80%A7%E6%96%87%E5%AD%97/</link>
      <pubDate>Sat, 10 Apr 2021 10:00:00 +0800</pubDate>
      
      <guid>https://elderlyaugustus.github.io/posts/2022-04-10-ue5.0%E6%97%B6%E7%BB%99%E7%B3%BB%E9%87%8C%E5%86%99%E7%9A%84lumen%E5%92%8Cnanite%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BB%8B%E7%BB%8D%E6%80%A7%E6%96%87%E5%AD%97/</guid>
      <description>开头说明一下，这是UE5.0正式版发布时给系里和某些合作单位供稿的一些介绍性文字，比较简单的整理，非最终发布版（考虑到影视业读者还在这基础上进一步删减了），补充发布到自己个站算是留痕吧
虚幻引擎5.0新功能为电影虚拟化制作助力 2021年5月26日，Epic Games推出虚幻引擎5.0 Early Access抢先体验版本，吸引了各行业的大量关注，其推出的Lumen、Nanite等新功能带来了更佳的实时渲染质量和更高的创作效率。直至2022年4月5日，Epic Games正式发布虚幻引擎5.0版本，长达近一年的预览期内，包括影视创作行业在内的各领域创作者、研究者进行了大量的探索和尝试。随着正式版本发布、新功能不断完善、更多的官方解析释出和源代码的发布，我们也对虚幻引擎5.0的许多新功能有了更加深入清晰的认识。
电影虚拟化制作作为基于实时渲染引擎的新型电影制作方案，随着虚幻引擎的完善与发展，及其对电影虚拟化制作相关功能的补充，近年来许多具体的解决方案通过虚幻引擎来实现。因此，虚幻引擎更新至5.0也引发了影视制作行业的重点关注。本文即关于虚幻引擎5.0中为电影虚拟化制作带来新动力的新功能，做一定的简单分析。
新功能概览 虚幻引擎中的电影虚拟化制作模块In-Camera VFX自虚幻引擎4.25开始发展，直至4.27有一个比较全面的更新，达到了基本完善的程度。而虚幻引擎5.0的早期开发是与4.27版本同步进行的，因此在5.0的早期预览版本中仍然使用的是4.26的In-Camera VFX系统。更新5.0正式版后，In-Camera VFX系统也承接了4.27版本中的形态，以更成熟的结构呈现。
在虚幻引擎5.0中，电影虚拟化制作相关功能获得了nDisplay虚拟纹理、nDisplay内视锥过扫描、相机镜头校准、DMX等插件、关卡快照、Switchboard、Sequencer、USD流程等诸多功能的支持和改进。
但由于In-Camera VFX系统在5.0中的开发刚刚开始，有不少5.0版本的新功能尚未能在In-Camera VFX和其依赖的nDisplay系统中获得支持，比如Lumen的渲染管线。不过进一步的支持应该也只是一个时间问题。相信在这些新功能的加持下，In-Camera VFX系统的电影虚拟化制作能力将达到一个新高度。
可以预见Lumen、Nanite为主导的渲染新功能将为电影虚拟化制作带来更高的背景影像质量和更高的场景资产制作效率，
Lumen Lumen是虚幻引擎5.0给出的“新一代”动态全局光照解决方案，其代码存放在Engine/Source/Runtime/Renderer/Private/Lumen中。
Lumen的整体思路是以SDF(Signed Distance Field) Trace为主的混合Tracing框架，同时用重新设计的Surface Cache场景表达，Radiance Cache作为最终的渲染结果收集。
混合的Tracing方案 在Lumen中，也可以先尝试调用基于硬件的RTX Trace，但主要还是软件的混合Tracing方案。其中包括Screen Space Trace、Mesh SDF Trace、Voxel Trace(Global SDF Trace)，按这一顺序依次Trace，前者失败则交给后者计算，成功则返回。
Screen Space Trace 首先是屏幕空间的Trace方法，它来自于虚幻引擎4.25就加入的SSGI(Screen Space Global Illumination)方案。这一方法能够很好地处理近似场景表达中丢失的细节。它利用HZB(Hierarchical Z-Buffer)优化遍历，可以改善线性遍历时的漏光问题，针对HZB带来的高开销问题，则限制其Trace步长在50步以内，否则交给下一种Trace方法。
世界空间的SDF Trace 屏幕空间方法失败之后，来到世界空间的Trace方法，也是Lumen的Trace管线中最为主要的Trace方法：SDF Trace。
对于近处的场景（例如1.8m内），Lumen采用Mesh SDF存储。对每一个Mesh存储一份SDF，实现相对低效但具有较好效果的SDF Trace。
在Mesh SDF中，为了解决物体厚度小于SDF存储的体素大小时判断失败的问题，Lumen对每一个物体扩展0.5倍的体素大小，这样保证了每一种厚度的物体都能够被Trace到，Trace到物体计算Radiance时再做相应的偏移梯度计算就能够得到相对准确的结果。
而远景则将每一个物体的Mesh SDF合并为全局的Global SDF，并生成层级结构Clipmaps。这样降低了远景场景的Trace精度，但大大提高了效率。
Global SDF的显存占用较大，更新开销正比于场景中的运动物体数量。这里采用了稀疏的存储方式，跳过大量的负值、零值SDF区域，减少了16倍的存储量，同时带来的多一次查询的问题则生成一层MIP2的贴图来改善：先查询MIP2，在接近物体表面时再查询全精度的Clipmap，这样对场景的更新也带来了遍历。
最后，对于每一步的Trace结构，还需要做一次压缩，以减小占用、提升缓存一致性。
这样，SDF Trace将Tracing、远景场景、远景场景复杂解耦，带来了较高的效率。但同时也具有体积存储大、缺乏微小细节、无法参数化表面数据等问题。
Surface Cache 在Surface Cache中，预先进行了一次分离的材质计算和光照计算的pass，在Tracing计算时，直接在Hit位置对Surface Cache作一次查询即可获得相对好的结果，提高Tracing效率。
Mesh Card SDF Trace无法用传统的三角形表达插值着色，因此Lumen使用Mesh Card的方式参数化存储场景表达。Mesh Card是渲染之前离线提前生成的有向矩形块，覆盖在模型表面——因此当模型较为模块化时效果较好。</description>
      <content:encoded><![CDATA[<blockquote>
<p>开头说明一下，这是UE5.0正式版发布时给系里和某些合作单位供稿的一些介绍性文字，比较简单的整理，非最终发布版（考虑到影视业读者还在这基础上进一步删减了），补充发布到自己个站算是留痕吧</p>
</blockquote>
<h1
id="虚幻引擎5.0新功能为电影虚拟化制作助力">虚幻引擎5.0新功能为电影虚拟化制作助力</h1>
<p>2021年5月26日，Epic Games推出虚幻引擎5.0 Early
Access抢先体验版本，吸引了各行业的大量关注，其推出的Lumen、Nanite等新功能带来了更佳的实时渲染质量和更高的创作效率。直至2022年4月5日，Epic
Games正式发布虚幻引擎5.0版本，长达近一年的预览期内，包括影视创作行业在内的各领域创作者、研究者进行了大量的探索和尝试。随着正式版本发布、新功能不断完善、更多的官方解析释出和源代码的发布，我们也对虚幻引擎5.0的许多新功能有了更加深入清晰的认识。</p>
<p>电影虚拟化制作作为基于实时渲染引擎的新型电影制作方案，随着虚幻引擎的完善与发展，及其对电影虚拟化制作相关功能的补充，近年来许多具体的解决方案通过虚幻引擎来实现。因此，虚幻引擎更新至5.0也引发了影视制作行业的重点关注。本文即关于虚幻引擎5.0中为电影虚拟化制作带来新动力的新功能，做一定的简单分析。</p>
<h2 id="新功能概览">新功能概览</h2>
<p>虚幻引擎中的电影虚拟化制作模块In-Camera
VFX自虚幻引擎4.25开始发展，直至4.27有一个比较全面的更新，达到了基本完善的程度。而虚幻引擎5.0的早期开发是与4.27版本同步进行的，因此在5.0的早期预览版本中仍然使用的是4.26的In-Camera
VFX系统。更新5.0正式版后，In-Camera
VFX系统也承接了4.27版本中的形态，以更成熟的结构呈现。</p>
<p>在虚幻引擎5.0中，电影虚拟化制作相关功能获得了nDisplay虚拟纹理、nDisplay内视锥过扫描、相机镜头校准、DMX等插件、关卡快照、Switchboard、Sequencer、USD流程等诸多功能的支持和改进。</p>
<p>但由于In-Camera
VFX系统在5.0中的开发刚刚开始，有不少5.0版本的新功能尚未能在In-Camera
VFX和其依赖的nDisplay系统中获得支持，比如Lumen的渲染管线。不过进一步的支持应该也只是一个时间问题。相信在这些新功能的加持下，In-Camera
VFX系统的电影虚拟化制作能力将达到一个新高度。</p>
<p>可以预见Lumen、Nanite为主导的渲染新功能将为电影虚拟化制作带来更高的背景影像质量和更高的场景资产制作效率，</p>
<h3 id="lumen">Lumen</h3>
<p>Lumen是虚幻引擎5.0给出的“新一代”动态全局光照解决方案，其代码存放在<code>Engine/Source/Runtime/Renderer/Private/Lumen</code>中。</p>
<p>Lumen的整体思路是以SDF(Signed Distance Field)
Trace为主的混合Tracing框架，同时用重新设计的Surface
Cache场景表达，Radiance Cache作为最终的渲染结果收集。</p>
<h4 id="混合的tracing方案">混合的Tracing方案</h4>
<p>在Lumen中，也可以先尝试调用基于硬件的RTX
Trace，但主要还是软件的混合Tracing方案。其中包括Screen Space Trace、Mesh
SDF Trace、Voxel Trace(Global SDF
Trace)，按这一顺序依次Trace，前者失败则交给后者计算，成功则返回。</p>
<h5 id="screen-space-trace">Screen Space Trace</h5>
<p>首先是屏幕空间的Trace方法，它来自于虚幻引擎4.25就加入的SSGI(Screen
Space Global
Illumination)方案。这一方法能够很好地处理近似场景表达中丢失的细节。它利用HZB(Hierarchical
Z-Buffer)优化遍历，可以改善线性遍历时的漏光问题，针对HZB带来的高开销问题，则限制其Trace步长在50步以内，否则交给下一种Trace方法。</p>
<center>
<img src="/images/misc/ue5.0/screen-traces-enabled.webp" alt="screen-traces-enabled" style="zoom: 18%;" /><img src="/images/misc/ue5.0/screen-traces-disabled.webp" alt="screen-traces-disabled" style="zoom: 18%;" />
<center/>
<h5 id="世界空间的sdf-trace">世界空间的SDF Trace</h5>
<p>屏幕空间方法失败之后，来到世界空间的Trace方法，也是Lumen的Trace管线中最为主要的Trace方法：SDF
Trace。</p>
<p>对于近处的场景（例如1.8m内），Lumen采用Mesh
SDF存储。对每一个Mesh存储一份SDF，实现相对低效但具有较好效果的SDF
Trace。</p>
<p><img src="/images/misc/ue5.0/vis-mesh-distance-fields.webp" alt="vis-mesh-distance-fields" style="zoom: 30%;" /></p>
<p>在Mesh
SDF中，为了解决物体厚度小于SDF存储的体素大小时判断失败的问题，Lumen对每一个物体扩展0.5倍的体素大小，这样保证了每一种厚度的物体都能够被Trace到，Trace到物体计算Radiance时再做相应的偏移梯度计算就能够得到相对准确的结果。</p>
<p><img src="/images/misc/ue5.0/mdfresolution-chandelier.png" alt="mdfresolution-chandelier" style="zoom:30%;" /></p>
<p>而远景则将每一个物体的Mesh SDF合并为全局的Global
SDF，并生成层级结构Clipmaps。这样降低了远景场景的Trace精度，但大大提高了效率。</p>
<p><img src="/images/misc/ue5.0/vis-global-distance-field.webp" alt="vis-global-distance-field" style="zoom:30%;" /></p>
<p>Global
SDF的显存占用较大，更新开销正比于场景中的运动物体数量。这里采用了稀疏的存储方式，跳过大量的负值、零值SDF区域，减少了16倍的存储量，同时带来的多一次查询的问题则生成一层MIP2的贴图来改善：先查询MIP2，在接近物体表面时再查询全精度的Clipmap，这样对场景的更新也带来了遍历。</p>
<p>最后，对于每一步的Trace结构，还需要做一次压缩，以减小占用、提升缓存一致性。</p>
<p>这样，SDF
Trace将Tracing、远景场景、远景场景复杂解耦，带来了较高的效率。但同时也具有体积存储大、缺乏微小细节、无法参数化表面数据等问题。</p>
<h4 id="surface-cache">Surface Cache</h4>
<p>在Surface
Cache中，预先进行了一次分离的材质计算和光照计算的pass，在Tracing计算时，直接在Hit位置对Surface
Cache作一次查询即可获得相对好的结果，提高Tracing效率。</p>
<p><img src="/images/misc/ue5.0/lumen-surface-cache-visualization.png" alt="lumen-surface-cache-visualization" style="zoom:30%;" /></p>
<h5 id="mesh-card">Mesh Card</h5>
<p>SDF Trace无法用传统的三角形表达插值着色，因此Lumen使用Mesh
Card的方式参数化存储场景表达。Mesh
Card是渲染之前离线提前生成的有向矩形块，覆盖在模型表面——因此当模型较为模块化时效果较好。</p>
<p>在运行时，基于Mesh
Card对场景做光栅化生成各种所需的G-Buffer，合并到Surface
Cache贴图中，此处的光栅化在Nanite
Mesh上计算效率极高。Trace时根据Cone开角选择对应的Card的MIPMAP，最后根据法线和深度加权并修正结果。</p>
<p>在直接光照中，可以选择其中的部分卡片单独更新光照，并利用Global
SDF做离屏部分的阴影Trace，可以实现非常好的动态光照效果。间接光照依然通过每帧选择部分Card，由Card的Texel发出Global
SDF Trace来计算，并与前帧数据合并得到较好的间接光照效果。</p>
<p><img src="/images/misc/ue5.0/mesh-card-placement-visualization-alt.webp" alt="mesh-card-placement-visualization-alt" style="zoom:30%;" /></p>
<h5 id="voxel-lighting-cache">Voxel Lighting Cache</h5>
<p>对于Global SDF Trace，只有空间位置而没有Mesh
Card信息时，Lumen的做法是利用Mesh Card生成一个体素化的场景，从而做Voxel
Trace。每一帧的体素化都需要重新生成，动态地获取体素精度。对每一个Tracing的结果，再分散到周围的Voxel中，以完成最后的Radiance收集。</p>
<h4 id="radiance-cache">Radiance Cache</h4>
<p>而Radiance
Cache则在屏幕空间做了降采样，用更低的分辨率存储更多方向的Tracing结果，减少了降噪的压力，同时支持跨帧的缓存以减少重复计算。</p>
<h5 id="屏幕空间的radiance-cache">屏幕空间的Radiance Cache</h5>
<p>在屏幕空间，例如以16个像素为一个Probe、每个Probe做8*8半球均匀方向分布的Trace，则减少了3/4的计算量，最后在全分辨率上计算BRDF着色。在室内环境能够得到很好的结果。</p>
<p>在实际应用中，还会根据深度平面自适应的Probe细化方式。最后以Probe到像素平面的距离为权重计算。同时利用前帧的重投影，可以根据前一帧较亮的部分、BRDF的值大小做重要性采样（若失败则转用世界空间的Radiance
Cache）。最后在Probe上做空间滤波，以深度判定滤波权重。</p>
<h5 id="世界空间的radiance-cache">世界空间的Radiance Cache</h5>
<p>在世界空间则用更低的分辨率，64*64为一个Probe放置在屏幕空间的Probe周围，来补充屏幕空间Radiance
Cache针对远处小体积高亮物体表现不佳的问题。</p>
<p>世界空间的Radiance
Cache可以有效复用长距离的Trace，提高一致性，从而带来了更高的方向精度，也可以跨帧缓存远距离的Tracing结果。</p>
<p><img src="/images/misc/ue5.0/lumen-far-field.webp" alt="lumen-far-field" style="zoom:100%;" /></p>
<p>世界空间的Radiance
Cache依然用稀疏的体素结构存储。还可以依据屏幕空间累计的结果，做BRDF的重要性采样。</p>
<p>世界空间的Radiance
Cache也用于引导屏幕空间的重要性采样，并用在头发、半透等前向渲染材质，多次反弹等特殊情景的渲染中。</p>
<h5 id="最终">最终</h5>
<p>最后回到屏幕空间全分辨率处理。把屏幕空间的Probe Radiance
Cache转换成三阶球面谐波函数来提高插值质量。用全分辨率的BentNormal获得接触阴影。</p>
<p><img src="/images/misc/ue5.0/lumen-overview-viewmode.png" alt="lumen-overview-viewmode" style="zoom:100%;" /></p>
<p>相比较基于NVIDIA
RTX显卡的RTXGI，Lumen是一个不依赖硬件加速支持、平台统一的全局光照解决方案，由于实时光线追踪在部分场景下降噪困难的局限性，Lumen在大世界的显存占用、室内照明的稳定性上具有很大优势。</p>
<p>Lumen带来了大场景下的优秀的动态全局光照表现，针对间接光阴影、室内漏光、室内高质量间接光、镜面反射、多次反弹的漫反射等实时渲染难题都做了相应的优化，使得实时渲染的质量达到的新的台阶。</p>
<p>因此，Lumen的追求也正符合影视创作对质量的追求，使得实时渲染的影视制作方法得到了更多的应用可能。当然在基于LED背景墙的电影虚拟化制作方式中，作为核心的nDisplay多屏渲染方式暂时还不支持Lumen的渲染管线，但相信不久的将来，会带来广泛的应用。</p>
<h3 id="nanite">Nanite</h3>
<p>Nanite是虚幻引擎5.0的新的几何体表示方式，目的是为了渲染更多的模型和模型细节，其代码存放在<code>Engine\Source\Runtime\Renderer\Private\Nanite</code>中。</p>
<p>借助Nanite，虚幻引擎5.0可以直接处理高精度扫描、雕刻创作等各种高精度的模型，而不再像过去的实时渲染引擎一样需要手工的LoD(Level
of Detail)处理，并且可以达到像素级别的模型渲染精度。</p>
<p><img src="/images/misc/ue5.0/nanite-in-unreal-engine.webp" alt="nanite-in-unreal-engine" style="zoom: 100%;" /></p>
<p>Nanite的核心理念是在自动的LoD减面时，不损失模型的拓扑精度，且在LoD切换时能够避免跳变。</p>
<h4 id="cluster生成">Cluster生成</h4>
<p>Nanite是基于Cluster的几何表示方案，将模型上的一定数量的面标记为一个Cluster，在GPU处理每一个Cluster时就可以访问等量的内存，带来了更高的效率。</p>
<p>Nanite的Cluster生成利用METIS库的Graph
Partition算法，在最高精度的原始模型（LoD0）上进行处理，并将Cluster组成面积均匀和边界最少的Group。而LoD时则锁定Group的边界，在每一个Group内重新生成Cluster，并将减面误差额外存储。最后对所有LoD层的Cluster分别生成BVH(Bounding
Volume Hierarchy)。</p>
<p><img src="/images/misc/ue5.0/level-viewport-show-nanite-visualizations-overview.webp" alt="level-viewport-show-nanite-visualizations-overview" style="zoom:30%;" /></p>
<h4 id="裁剪和lod选择">裁剪和LoD选择</h4>
<p>在渲染时，利用前一帧的HZB做裁剪，依次做模型和Cluster的剔除，然后光栅化得到当前帧的HZB再对场景做一次当前帧的裁剪，得到更加精准的裁剪结果。</p>
<p>利用GPU并行和Cluster的类BVH加速结构，可以很快地精确地对细节程度匹配的LoD做剔除和选择。用额外存储的误差进行判断，可以保证被选中的Cluster
Group误差最小，而Group与Group之间边界保持锁定，因此可以保证模型的连接。</p>
<center>
<img src="/images/misc/ue5.0/fallback-mesh-comparison-high-detail-nanite-mesh.webp" alt="fallback-mesh-comparison-high-detail-nanite-mesh" style="zoom:21%;" /><img src="/images/misc/ue5.0/fallback-mesh-comparison-high-detail-nanite-mesh.webp" alt="fallback-mesh-comparison-high-detail-nanite-mesh" style="zoom:21%;" />
<center/>
<h4 id="光栅化与材质">光栅化与材质</h4>
<p>传统的光栅化管线对Nanite这样的小于单个像素的三角形并不友好，因此在Nanite重新设计了软件光栅化管线，根据Cluster的粒度来决定使用自定义软件光栅还是硬件光栅。最后输出实例ID、三角形ID、深度定义的Visibility
Buffer。</p>
<p>利用Visibility
Buffer，可以很好地解耦材质的复杂度。在每个Cluster上，可以支持存储32位的材质信息，每个模型最多可以支持64种材质。最后基于Tile，每种材质做一次Draw进行渲染。</p>
<h4 id="串流和压缩">串流和压缩</h4>
<p>此外，由于Nanite庞大的数据结构，在串流和压缩上也做了相应的优化。</p>
<p>在GPU端存储裁剪的层级结构，而串流采用类似Virtual
Texture的处理逻辑，根据渲染的需要，以Cluster
Group为粒度传输相应的几何数据。</p>
<p>利用通用的硬件压缩，根据数据的特征调整后的压缩方法，也实现了非常好的压缩效果。</p>
<p>基于Nanite，还可以实现虚拟阴影贴图等新特性。虽然目前支持的材质和几何类型并不完全，关于前向渲染和光线追踪等渲染方式的尚不支持，但Nanite已经为实时渲染带来了非常高的几何细节，也带来了更高的创作效率。</p>
<center>
<img src="/images/misc/ue5.0/nanite-facetfaces-gameview.png" alt="nanite-facetfaces-gameview" style="zoom:33%;" /><img src="/images/misc/ue5.0/nanite-facetfaces-trianglevis.png" alt="nanite-facetfaces-trianglevis" style="zoom:33%;" />
<center/>
<p>此外，虚幻引擎5.0在大世界构成上的世界分区系统、角色动画创作上更友好的工具、更多材质效果支持的路径追踪器以及更丰富的Chaos系统等等主要针对游戏、离线动画创作的新功能，也可以在一定程度上助力电影虚拟化制作，带来各种各样的可能性。</p>
<h2 id="如何助力电影虚拟化制作">如何助力电影虚拟化制作</h2>
<p>实时渲染引擎是电影虚拟化制作技术发展的基石之一，Lumen和Nanite为代表的虚幻引擎5.0重点新功能对于电影虚拟化制作的意义巨大，主要可以从效果和效率两方面来考虑。</p>
<h4 id="效果">效果</h4>
<p>电影虚拟化制作的最终服务目标是电影，影院的观影环境决定了电影质量的要求是要比小屏幕影像高得多的。而实时渲染的结果却从客观条件上就受限于“实时”的条件，很难达到离线渲染的精度。因此，目前电影虚拟化制作的应用也大多集中在广告、剧集领域，其渲染效果距离电影尚存在一定差距。</p>
<p>虚幻引擎5.0的渲染方面新功能，无疑将实时渲染的画面质量提高了一个台阶，一些条件下甚至可以一定程度地接近离线渲染效果。例如Lumen带来的动态全局光照、Nanite带来的像素级几何细节，都为实时渲染在影视制作中的应用提供了巨大的助力，使得电影虚拟化制作的影像效果得到了很大提升。</p>
<h4 id="效率">效率</h4>
<p>目前，电影虚拟化制作的创作瓶颈主要在于，它将传统影视制作的流程顺序改变之后，数字资产的制作主要在拍摄之前完成、美术置景也大量通过数字方式完成，且需要以实时渲染的方式来实现。这对传统影视制作领域的美术创作者、视效创作者来说是相对陌生的，各制作机构的制作流程管线也尚在探索与搭建中。因此电影虚拟化制作场景制作尚不能达到传统影视制作的效率。</p>
<p>在实时渲染引擎中的美术创作则更贴合游戏美术制作的思路，需要更多地考虑性能开销、资产优化等问题。而虚幻引擎5.0的许多编辑器更多则带来了更自动化的优化方式和可视化方案。例如Nanite可以完全解放传统美术生产管线中的手工LoD环节，Lumen的各种可视化功能也有助于美术工作者更方便地看到资产的各种信息从而加以优化。</p>
<p>实时渲染引擎加持的影视制作是近年来影视行业非常关注的新技术，电影虚拟化制作作为其中的主流应用方案，也得到了广泛的研究与应用。虚幻引擎5.0的发布展现了CG创作呈现工具的发展趋势与新型技术方案，为电影虚拟化制作也带来了更多的动力，相信更多的创作工具、制作技术也会受之启发或借助其力量诞生、发展。</p>
<p><strong>图片来源</strong></p>
<p>[1] Epic Games. Lumen Technical Details.
https://docs.unrealengine.com/5.0/en-US/lumen-technical-details-in-unreal-engine/
[2] Epic Games. Nanite Virtualized Geometry.
https://docs.unrealengine.com/5.0/en-US/nanite-virtualized-geometry-in-unreal-engine/</p>
<p><strong>参考文献</strong></p>
<p>[1] Epic Games. Unreal Engine 5.0 Release Notes.
https://docs.unrealengine.com/5.0/en-US/unreal-engine-5-0-release-notes/
[2] Epic Games. Lumen Technical Details.
https://docs.unrealengine.com/5.0/en-US/lumen-technical-details-in-unreal-engine/
[3] 王祢. [UOD2021]虚幻引擎5渲染特性解析 Lumen | Epic Games 王祢.
https://www.bilibili.com/video/BV1fu411272a [4] Unreal Engine. Lumen |
Inside Unreal. https://www.youtube.com/channel/UCBobmJyzsJ6Ll7UbfhI4iwQ
[5] Epic Games. Nanite Virtualized Geometry.
https://docs.unrealengine.com/5.0/en-US/nanite-virtualized-geometry-in-unreal-engine/
[6] 王祢. [UnrealCircle]Nanite技术简介 | Epic Games China 王祢.
https://www.bilibili.com/video/BV1MP4y1a7Hh [7] Unreal Engine. Nanite |
Inside Unreal. https://www.youtube.com/watch?v=TMorJX3Nj6U</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>之前的笔记链接</title>
      <link>https://elderlyaugustus.github.io/posts/2021-02-25-%E4%B9%8B%E5%89%8D%E7%9A%84%E7%AC%94%E8%AE%B0%E9%93%BE%E6%8E%A5/</link>
      <pubDate>Thu, 25 Feb 2021 19:00:00 +0800</pubDate>
      
      <guid>https://elderlyaugustus.github.io/posts/2021-02-25-%E4%B9%8B%E5%89%8D%E7%9A%84%E7%AC%94%E8%AE%B0%E9%93%BE%E6%8E%A5/</guid>
      <description>信号与系统 上 中 下 傅予力
2020寒假
https://mp.weixin.qq.com/s/_wx_PICiVGz896kyh6MTkg
https://mp.weixin.qq.com/s/_JEL55Nfo6As3uA1RhkNyw
https://mp.weixin.qq.com/s/9G3H0eNAEDn54BRH67fvrA
GAMES101现代计算机图形学入门 闫令琪
2020上半年-疫情在家
https://mp.weixin.qq.com/s/bJn56NO8bL9y6BI3T1SHAw</description>
      <content:encoded><![CDATA[<h3 id="信号与系统-上-中-下">信号与系统 <a
href="https://mp.weixin.qq.com/s/_wx_PICiVGz896kyh6MTkg">上</a> <a
href="https://mp.weixin.qq.com/s/_JEL55Nfo6As3uA1RhkNyw">中</a> <a
href="https://mp.weixin.qq.com/s/9G3H0eNAEDn54BRH67fvrA">下</a></h3>
<p>傅予力<br />
2020寒假<br />
https://mp.weixin.qq.com/s/_wx_PICiVGz896kyh6MTkg<br />
https://mp.weixin.qq.com/s/_JEL55Nfo6As3uA1RhkNyw<br />
https://mp.weixin.qq.com/s/9G3H0eNAEDn54BRH67fvrA</p>
<h3 id="games101现代计算机图形学入门"><a
href="https://mp.weixin.qq.com/s/bJn56NO8bL9y6BI3T1SHAw">GAMES101现代计算机图形学入门</a></h3>
<p>闫令琪<br />
2020上半年-疫情在家<br />
https://mp.weixin.qq.com/s/bJn56NO8bL9y6BI3T1SHAw</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
